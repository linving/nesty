{
  "name": "Nesty",
  "tagline": "Http RESTful api implemention on Netty async io",
  "body": "# Nesty\r\nHttp RESTful Api implemention on Netty async io\r\n\r\n## Lastest version\r\n0.0.2\r\n\r\n## changeslog \r\n\r\n0.0.2\r\n* support http long connection(Connection: keep-alive)\r\n* support root path (uri path is /) stats and counter information\r\n\r\n0.0.1 \r\n* original snapshot version\r\n\r\n## Features\r\n\r\n* Http HTTP/1.1 protocol support \r\n\r\nGET | POST | UPDATE | DELETE\r\n--- | --- | --- | ---\r\n\r\n* Http Restful serialized (usually as json) in string body (With Gson)\r\n* Http Short Connection on async mode by default (With Netty 4.2)\r\n* Http request mapping variable support\r\n\r\nAnnotation | From \r\n--- | --- \r\n@Header | http header \r\n@RequestParam | http url query string or http body key value pairs \r\n@PathVariabl | http uri path vairable with {path} \r\n@Body | http body \r\n\r\n* Http request mapping method params type support\r\n\r\nClass Type | Default value (require = false is set) | Description\r\n--- | --- | --- \r\nint,short,long | 0 | primitive\r\nfloat,double | 0.0d | primitive\r\nString | null | string value\r\nEnum | null | enum class type\r\nClass | null | from http body serializer parsed\r\n\r\n## TODO\r\n* Long connection support (require explict Connection: Keep-Alive header set)\r\n* Spring or Mybatis intergrated\r\n\r\n\r\n## Usage\r\n\r\n* Simplest http server\r\n\r\n```java\r\npublic class SimpleHttpServer {\r\n\r\n\tpublic static void main(String[] args) throws ControllerRequestMappingException {\r\n\t\tAsyncServerProvider.builder().port(8080).service(NestyProtocol.HTTP)\r\n\t\t\t.scanHttpController(\"org.nesty.example.httpserver.handler\").start();\r\n\t}\r\n}\r\n```\r\n\r\n* Normal http server\r\n\r\n```java\r\n\r\npublic static void main(String[] args) {\r\n\r\n\t// 1. build httpserver\r\n\tNestyServer server = AsyncServerProvider.builder().port(8080).service(NestyProtocol.HTTP);\r\n\r\n\t// 2. choose http params. this is unnecessary\r\n\tserver.option(NestyOptions.IO_THREADS, Runtime.getRuntime().availableProcessors())\r\n\t\t  .option(NestyOptions.WORKER_THREADS, 128)\r\n\t\t  .option(NestyOptions.TCP_BACKLOG, 1024)\r\n\t\t  .option(NestyOptions.TCP_NODELAY, true);\r\n\r\n\t// 3. scan defined controller class with package name\r\n\tserver.scanHttpController(\"com.nesty.test.neptune\")\r\n\t\t  .scanHttpController(\"com.nesty.test.billing\")\r\n\t\t  .scanHttpController(\"org.nesty.example.httpserver.handler\");\r\n\r\n\t// 4. start http server\r\n\tif (!server.start())\r\n\t\tSystem.err.println(\"NestServer run failed\");\r\n\r\n\ttry {\r\n\t\t// join and wait here\r\n\t\tserver.join();\r\n\t\tserver.shutdown();\r\n\t} catch (InterruptedException ignored) {\r\n\t}\r\n}\r\n```\r\n\r\n* Controlloer\r\n\r\n```java\r\n@Controller\r\n@RequestMapping(\"/projects\")\r\npublic class ServiceController {\r\n\r\n\t@RequestMapping(value = \"/{projectId}\", method = RequestMethod.GET)\r\n\tpublic ServiceResponse getProjectById(@PathVariable(\"projectId\") Integer projectId) {\r\n\t\tSystem.out.println(\"getProjectById() projectId \" + projectId);\r\n\t\treturn new ServiceResponse();\r\n\t}\r\n}\r\n\r\n```\r\n\r\n* Interceptor\r\n\r\n```java\r\n@org.nesty.commons.annotations.Interceptor\r\npublic class ServiceInterceptor extends Interceptor {\r\n\r\n\t@Override\r\n\tpublic boolean filter(final HttpContext context) {\r\n\r\n\t\t// count the request\r\n\t\ttotalRequest.incrementAndGet();\r\n\r\n\t\t// show remote address\r\n\t\tif (!context.getRemoteAddress().isEmpty())\r\n\t\t\tSystem.out.println(String.format(\"request from client %s\", context.getRemoteAddress()));\r\n\r\n\t\t// reject some one which is not we want\r\n\t\tif (context.getRemoteAddress().equals(\"192.168.1.1\"))\r\n\t\t\treturn false;\r\n\r\n\t\t// reject request from agent like curl\r\n\t\tif (context.getHttpHeaders().containsKey(\"User-Agent\"))\r\n\t\t\treturn false;\r\n\r\n\t\t// OK\r\n\t\treturn true;\r\n\t}   \r\n\r\n\t@Override\r\n\tpublic DefaultFullHttpResponse handler(final HttpContext context, DefaultFullHttpResponse response) {\r\n\r\n\t\t// compress content if client support\r\n\t\tif (\"gzip\".equalsIgnoreCase(context.getHttpHeaders().get(\"Accept-Encoding\"))) {\r\n\t\t\t// compress the body\r\n\t\t\tByteBuf compressContent = compressWithGzip(response.content());\r\n\t\t\tDefaultFullHttpResponse newResponse = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.OK, compressContent);\r\n\t\t\tresponse = newResponse;\r\n\t\t}   \r\n\r\n\t\t// add more header\r\n\t\tresponse.headers().add(\"NestyInceptor\", \"Nesty is Good\");\r\n\r\n\t\treturn response;\r\n\t}   \r\n}\r\n\r\n\r\n\r\nMore examples. Please visit https://github.com/gugemichael/nesty/wiki/More-Examples\r\n\r\n## Threads Model\r\n\r\n* Netty Bootstrap(io threads) + ThreadPool(logic threads)\r\n\r\n![screenshot](http://img1.tbcdn.cn/L1/461/1/40ef4fb553fb9b565ddf79989a6f17877dcb3de7)\r\n\r\n## Performance\r\n\r\njava -server -Xmx4G -Xms4G -Xmn1536M -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:PermSize=256m -XX:MaxPermSize=256m -XX:+DisableExplicitGC\r\n\r\nHttp short connection\r\n* Conccurent : 512 http connections \r\n* Qps : 40,000+\r\n* Latency : < 10ms\r\n\r\nHttp long connection (Connection: keep-alive)\r\n* Conccurent : 512 http connections \r\n* Qps : 80,000 ~ 100,000\r\n* Latency : < 50ms\r\n\r\ndetail : https://github.com/gugemichael/nesty/wiki/Performance-Detail\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}